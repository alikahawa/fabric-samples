const { encryptWithProof, verifyProof } = require("./lib/lib");
const paillier = require("paillier-js");
const bigInt = require('big-integer')

const bits = 512;

// Public key
const pubKey = {
  n: "9142559422016260560931665512001863622192737727222746187521723222425623797100196788347197337200163980661910528758444018198289135767127347865954852737280643",
  _n2: "83586392785098300373105871655651997088058199889325027474686903736938183138596392256468839085054040151016735207633172062354917353288800816588407702087931884194474122927168568692543928479791158663949840750960717009435660564161110308292064882552794788220941292794801781596377259556992297333646726642418542493449",
  g: "27135323410701433747587625893051088585652824629534691913928433283508183656855844990808069189718897402653426041367853854588636073847732776991784574018380945834187859526225849489382045734471108175745883198325240842613355058355521309786641343184060255004206656359059559912284474602665521053613154627390844941581",
};
// Private key
const privKey = {
  lambda:
    "1523759903669376760155277585333643937032122954537124364586953870404270632850000525562533587532566463651964901275593433279681248549178618127060977998183340",
  mu: "94277953473563940217824264317925348658407389461804206449741990009393690485930045452539619832879764886821994661949345282776591614897808869405775324579681",
  _p: "81616625070364290639788258837371607425871252494740408088804547998957941049471",
  _q: "112018346925447714125410491283749497457547267706904063966834555590026807131133",
  publicKey: {
    n: "9142559422016260560931665512001863622192737727222746187521723222425623797100196788347197337200163980661910528758444018198289135767127347865954852737280643",
    _n2: "83586392785098300373105871655651997088058199889325027474686903736938183138596392256468839085054040151016735207633172062354917353288800816588407702087931884194474122927168568692543928479791158663949840750960717009435660564161110308292064882552794788220941292794801781596377259556992297333646726642418542493449",
    g: "27135323410701433747587625893051088585652824629534691913928433283508183656855844990808069189718897402653426041367853854588636073847732776991784574018380945834187859526225849489382045734471108175745883198325240842613355058355521309786641343184060255004206656359059559912284474602665521053613154627390844941581",
  },
};

// const { publicKey, privateKey } = paillier.generateRandomKeys(512);

const publicKey = new paillier.PublicKey(pubKey.n, pubKey.g);
const privateKey = new paillier.PrivateKey(privKey.lambda, privKey.mu, privKey.p, privKey.q, publicKey);

const currentState = '7995136494673483785669179811475272510450027343183578173777499623158038623391686455652299817750234935001248414830181679377083470432021167227922436974218257206746229133689691796477728120749268475968128077322883023388372482573119745003751467028149186459396235181345525371374824986156601599741653531678924129398'
const result = privateKey.decrypt(currentState);
console.log(result.toString())











return;

// const { publicKey, privateKey } = paillier.generateRandomKeys(512);

const validScores = [-1, 1];

const [initialValue, proof1] = encryptWithProof(publicKey, 0, [0], bits);

// console.log(initialValue.toString());
// console.log(proof1.toString());

const [nextVote, proof2] = encryptWithProof(publicKey, 1, [1, -1], bits);

console.log(nextVote.toString());
console.log(JSON.stringify(proof2));

const proof = JSON.parse(JSON.stringify(proof2))

const parsedProof = proof.map( e => e.map(g => bigInt(g)))

const isVoteValid = verifyProof(publicKey, bigInt(nextVote.toString()), parsedProof, [1,-1], bits) 

// console.log(isVoteValid)

// const r = privateKey.decrypt(d);
// console.log(r.toString());
// const result = verifyProof(publicKey, initialValue, proof1, [0], bits) // true
// console.log(result)
// const [cipher, proof] = encryptWithProof(publicKey, secretScore, validScores, bits)

// // Transmit cipher, proof and publicKey

// const result = verifyProof(publicKey, cipher, proof, secScores, bits) // true
// console.log(cipher)
// console.log(result)
